#
version: 2.1
orbs:
  go: circleci/go@0.2.0
commands:
  test_smartx:
    parameters:
      splunk_version:
        description: Image version
        type: string
        default: latest
    steps:
    - attach_workspace:
        at: /tmp/workspace
    - run:
        name: Building Example-TA
        command: |
          cd tests/deps/splunk-add-on-for-ucc-example
          sudo ./build.sh
    - run:
        name: Setup for testing
        command: |
          echo "Setup for Testing..."
          pip install git+https://github.com/pixelb/crudini
          mkdir test-results
          cp -r tests/deps/splunk-add-on-for-ucc-example/output output
          export SPLUNK_VERSION=$(crudini --get tests/deps/build/addonfactory_test_matrix_splunk/splunk_matrix.conf "<<parameters.splunk_version>>" VERSION)
          
          export SPLUNK_APP_ID=$(crudini --get tests/deps/splunk-add-on-for-ucc-example/package/default/app.conf id name)
          export SPLUNK_APP_PACKAGE=tests/deps/splunk-add-on-for-ucc-example/output/$(ls tests/deps/splunk-add-on-for-ucc-example/output/)
          export TEST_SET=tests/deps/splunk-add-on-for-ucc-example/tests/ui

          docker-compose -f docker-compose-ci.yml build
    - run:
        name: Splunk Testing
        command: |
          # Start Splunk
          cd tests/deps/splunk-add-on-for-ucc-example

          #
          [ ! -d "tests/ui" ] && echo "No Tests found. skipping..." &&  exit 0
          docker-compose -f docker-compose-ci.yml up -d splunk
          until docker-compose -f docker-compose-ci.yml logs splunk | grep "Ansible playbook complete" ; do sleep 1; done

          # Run the tests
          docker-compose -f docker-compose-ci.yml up  --abort-on-container-exit test || test_exit_code=$?
          # Collect Results
          docker container create --name dummy \
                              -v project_results:/home/circleci/work/test-results \
                              registry.access.redhat.com/ubi7/ubi
          docker cp dummy:/home/circleci/work/test-results/test.xml test-results/  || true
          exit "$test_exit_code"


    - store_artifacts:
        path: test-results
        destination: test-results
    - store_test_results:
        path: test-results

jobs:
  build:
    docker:
      - image: circleci/python:3.7-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - poetry-cache-{{ checksum "poetry.lock" }}
      - run:
          name: Install Tools
          command: |
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      - run:
          name: Build
          command: |
            source $HOME/.poetry/env
            poetry install
            poetry run poetry-dynamic-versioning
            poetry build
      - save_cache:
          key: poetry-cache-{{ checksum "poetry.lock" }}
          paths:
            - ~/.cache/poetry
      - store_artifacts:
          path: dist
      - store_artifacts:
          path: output
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: .
          # Must be relative path from root
          paths:
            - dist
            - output

  test:
    docker:
      - image: circleci/python:3.7-node
    parameters:
      splunk_version:
        description: Image version
        type: string
        default: latest
    steps:
      - checkout
      - run:
          name: Update Submodules
          command: |
            git submodule sync
            git submodule update --init --recursive
            git submodule update --remote --merge
      - run:
          name: Update Example TA submodules
          command: |
            cd tests/deps/splunk-add-on-for-ucc-example
            git submodule sync
            git submodule update --init --recursive
            git submodule update --remote --merge
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install Tools
          command: |
            pip install /tmp/workspace/dist/*
      - test_smartx:
            splunk_version: <<parameters.splunk_version>>
  publish:
    docker:
      - image: circleci/python:3.7-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - poetry-cache-{{ checksum "poetry.lock" }}
      - run:
          name: Install Tools
          command: |
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      - run:
          name: Build
          command: |
            source $HOME/.poetry/env
            export PATH=~/.npm-global/bin:$PATH
            poetry install
            poetry run poetry-dynamic-versioning
            poetry publish --build -u $TWINE_USERNAME -p $TWINE_PASSWORD
      - save_cache:
          key: poetry-cache-{{ checksum "poetry.lock" }}
          paths:
            - ~/.poetry
      - store_artifacts:
          path: dist
      - store_artifacts:
          path: output
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: .
          # Must be relative path from root
          paths:
            - dist
            - output
  tag:
    parameters:
      semtag:
        type: string
    docker:
      - image: circleci/python:3.7
    environment:
      SEMTAG: "<< parameters.semtag >>"
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "14:2e:73:04:b0:3d:21:7d:bb:c5:79:51:f9:52:b2:22"
      - checkout
      - run:
          name: TAG
          command: |
            ./semtag ${SEMTAG} -f

  merge-beta-to-master:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "7c:e9:cc:8d:8e:4d:9c:17:1d:e3:96:23:ce:bd:a4:c3"
      - checkout
      - run:
          name: Merge
          command: |
            git config --global user.email "addonreleasesrv@splunk.com"
            git config --global user.name "Add on release service"
            git pull origin master
            git merge master -m "Merge from master"
            git checkout master
            git merge << pipeline.git.revision >>
            git push
workflows:
  version: 2
  build_test:
    jobs:
      - build
      - test:
          requires:
            - build
          matrix:
            parameters:
              splunk_version: ["7.3"]
      - approval-tag-alpha:
          requires:
            - test
          type: approval
          filters:
            branches:
              only: develop
      - tag:
          name: tag-alpha
          requires:
            - approval-tag-alpha
          semtag: a
  release:
    jobs:
      - publish:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*.*$/
      - approval-tag-beta:
          requires:
            - publish
          type: approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*-a\..*$/
      - tag:
          name: tag-beta
          semtag: b
          requires:
            - approval-tag-beta
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*-a\..*$/
      - approval-merge-beta-to-master:
          requires:
            - publish
          type: approval
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*-b\..*$/
      - merge-beta-to-master:
          requires:
            - approval-merge-beta-to-master
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*-b\..*$/
      - approval-tag-final-major:
          type: approval
          requires:
            - merge-beta-to-master
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*-b\..*$/
      - tag:
          name: tag-final-major
          semtag: "final -s major"
          requires:
            - approval-tag-final-major
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*-b\..*$/
      - approval-tag-final-minor:
          type: approval
          requires:
            - merge-beta-to-master
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*-b\..*$/
      - tag:
          name: tag-final-minor
          semtag: "final -s minor"
          requires:
            - approval-tag-final-minor
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*-b\..*$/
      - approval-tag-final-patch:
          type: approval
          requires:
            - merge-beta-to-master
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*-b\..*$/
      - tag:
          name: tag-final-patch
          semtag: "final -s patch"
          requires:
            - approval-tag-final-patch
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v\d*\.\d*\.\d*-b\..*$/
