
name: build-test-release
on:
  push:
    branches:
      - "main"
      - "develop"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: [main, develop]

jobs:
  compliance-dependencies:
    name: Compliance Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: ort-action
        uses: splunk/addonfactory-ort-action@v1
        id: ort-action
        with:
          WorkDir: .
          UsePython3: "3.7"        
      - name: ort-action-artifacts-reports
        uses: actions/upload-artifact@v2
        with:
          name: analysis-reports
          path: |
            .ort/reports/*
        if: always()
      - name: ort-action-artifacts-analyzer
        uses: actions/upload-artifact@v2
        with:
          name: analysis-analyzer
          path: |
            .ort/analyzer/*
        if: always()

  compliance-copyrights:
    name: Compliance Copyright Headers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Check License Header
        uses: apache/skywalking-eyes@v0.2.0

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Install actionlint
        run: |
          bash <(curl https://raw.githubusercontent.com/rhysd/actionlint/v1.6.8/scripts/download-actionlint.bash)
      - uses: pre-commit/action@v2.0.3

  review_secrets:
    name: security-detect-secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false
          fetch-depth: "0"
      - name: Trufflehog Actions Scan
        uses: edplato/trufflehog-actions-scan@v0.9j-beta
        with:
          scanArguments: "--max_dept 50 -x .github/workflows/exclude-patterns.txt"

  semgrep:
    runs-on: ubuntu-latest
    name: security-sast-semgrep
    steps:
      - uses: actions/checkout@v2
      - name: Semgrep
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_PUBLISH_TOKEN }}

  build:
    name: build
    runs-on: ubuntu-latest
    needs:
      - compliance-dependencies
      - compliance-copyrights
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      - name: Install tools
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
      - name: Build Package
        id: uccgen
        run: |
          # shellcheck source=/dev/null
          source "$HOME"/.poetry/env
          poetry install
          poetry run poetry-dynamic-versioning
          poetry build
      - name: artifact-splunk-unpacked
        uses: actions/upload-artifact@v2
        with:
          name: package
          path: dist/*
        if: always()

  run-unit-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Install dependencies
        run: |
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
          curl https://pyenv.run | bash
          export PATH="$HOME/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          pyenv install 3.7.8
          pyenv local 3.7.8
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
          # shellcheck source=/dev/null
          source ~/.poetry/env
      - name: Test with pytest
        run: |
          export PATH="$HOME/.pyenv/bin:$PATH"
          eval "$(pyenv init -)"
          # shellcheck source=/dev/null
          source ~/.poetry/env
          poetry install
          poetry run coverage run --source=./pytest_splunk_addon_ui_smartx -m pytest -v tests/unit
          poetry run coverage json
      - name: Archive test coverage results
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report-unit-tests
          path: coverage.json

  run-ui-tests:
    if: always()
    needs:
      - build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        splunk-version: ['8.2']
        python-version: [3.7]
        browser: ["chrome", "firefox"]
        test_suit: [
          "test_splunk_ta_example_addon_logging",
          # "test_splunk_ta_example_addon_account",
          # "test_splunk_ta_example_addon_proxy",
          # "test_splunk_ta_example_addon_input",
          # "test_splunk_ta_example_addon_custom",
          # "test_splunk_ta_example_addon_alert_actions"
        ]
    env:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/download-artifact@v2
        with:
          name: package
          path: dist/
      - name: Set up Python=${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup kubernetes cluster
        id: kubernetes
        run: |
          ./k3s.sh
          kubectl get no
      - name: Setup Splunk-Operator at cluster-scope
        run: |
          wget -O splunk-operator.yaml https://github.com/splunk/splunk-operator/releases/download/1.0.5/splunk-operator-cluster.yaml
          kubectl apply -f splunk-operator.yaml
          sleep 30
          kubectl get ns
          kubectl get pods -A
      - name: update submodule
        run: |
            git submodule sync
            git submodule update --recursive --remote
      - name: Downloading Example-TA
        run: |
            cd tests/deps/splunk-add-on-for-ucc-example
            mkdir output 
            cd output
            pwd
            curl -s https://api.github.com/repos/splunk/splunk-add-on-for-ucc-example/releases/latest | grep "Splunk_TA.*.spl" | grep -v search_head | grep -v indexer | grep -v forwarder | cut -d : -f 2,3 | tr -d \" | wget -qi - || true
            ls
            # tar -xzf Splunk_TA*.spl
            # ls
            # rm Splunk_TA*.spl
            # ls
      - name: Setup for testing
        run: |
          echo "Setup for Testing..."
          pip install git+https://github.com/pixelb/crudini
          mkdir test-results
          cp -r tests/deps/splunk-add-on-for-ucc-example/output output
          ls -al tests
          ls -al output
      - name: Splunk Setup
        run: |
          echo "Splunk setup..."
          export NAMESPACE_NAME=ta-ucc-example
          export SPLUNK_ADDON="$(ls output)"
          echo $SPLUNK_ADDON
          export SPLUNK_VERSION=${{ matrix.splunk-version }}
          echo $SPLUNK_VERSION
          eval "echo \"$(cat ./namespace.yaml)\"" > ./namespace_updated.yaml
          eval "echo \"$(cat ./splunk_standalone.yaml)\"" > ./splunk_standalone_updated.yaml
          kubectl apply -f ./namespace_updated.yaml
          kubectl run nginx -n $NAMESPACE_NAME --image=nginx --port=80 --expose
          kubectl wait pod nginx --for=condition=ready --timeout=300s -n $NAMESPACE_NAME
          kubectl cp ./output/$SPLUNK_ADDON nginx:/usr/share/nginx/html -n $NAMESPACE_NAME
          echo "        - http://nginx//$SPLUNK_ADDON" >> ./splunk_standalone_updated.yaml
          kubectl apply -f ./splunk_standalone_updated.yaml -n $NAMESPACE_NAME
          until kubectl logs splunk-s1-standalone-0 -c splunk -n $NAMESPACE_NAME  | grep "Ansible playbook complete"; do sleep 1; done
          kubectl port-forward svc/splunk-s1-standalone-service -n $NAMESPACE_NAME 8000:8000 8088:8088 8089:8089 9997:9997 &
          sleep 60
          # echo "Sauce connect proxy setup..."
          
          echo "##################################"
          sudo echo "127.0.0.1 splunk-standalone.test" | sudo tee -a /etc/hosts
          cat /etc/hosts

          # echo "$SPLUNK_VERSION"
          # echo "$SPLUNK_APP_ID"
          # echo "$SPLUNK_APP_PACKAGE"
          # echo "$TEST_SET"
          # echo "$TEST_BROWSER"
          # echo "$TEST_SUITE"
          # echo "Testing..."
          # docker-compose -f docker-compose-ci.yml build
          # # Saucelab connection
          # docker-compose -f docker-compose-ci.yml up -d sauceconnect
          
          # # Start selenium grid if needed.
          # if [[ "$TEST_BROWSER" == *"firefox_grid"* ]]; then docker-compose -f docker-compose-ci.yml up -d firefox-grid; fi
          # if [[ "$TEST_BROWSER" == *"chrome_grid"* ]]; then docker-compose -f docker-compose-ci.yml up -d chrome-grid; fi
          # # Start Splunk
          # docker-compose -f docker-compose-ci.yml up -d splunk
          # until docker-compose -f docker-compose-ci.yml logs splunk | grep "Ansible playbook complete" ; do sleep 1; done
          # # Normal Inspecting
          # docker-compose -f docker-compose-ci.yml logs sauceconnect
          # docker ps -a
          # # Run the tests
          # test_exit_code=0
          # docker-compose -f docker-compose-ci.yml up  --abort-on-container-exit test || test_exit_code=$?
          # # Collect Results
          # docker container create --name dummy \
          #                     -v addon-factory-smartx-ui-test-library_results:/work/test-results \
          #                     registry.access.redhat.com/ubi7/ubi
          # docker cp dummy:/work/test-results/test.xml test-results/ || true
          # docker cp dummy:/work/test-results/test.xml test-results/  || true
          # docker cp dummy:/work/assets test-results/assets  || true
          # docker cp dummy:/work/test-results/report.html test-results/report.html  || true
          # docker-compose -f docker-compose-ci.yml down || true
          # echo exit code "$test_exit_code"
          # exit "$test_exit_code"
      - name: Saucelabs Setup
        run: |
          sudo apt-get update;
          sudo apt-get install -y curl;
          export SAUCE_USERNAME="${{ secrets.SAUCE_USERNAME }}"
          export SAUCE_PASSWORD="${{ secrets.SAUCE_PASSWORD }}"
          export SAUCE_TUNNEL_ID="smartx:${{ matrix.browser }}:$(date +%s)"
          export SAUCE_IDENTIFIER=$SAUCE_TUNNEL_ID
          echo "_______________=======================________________"
          echo $SAUCE_TUNNEL_ID
          curl https://saucelabs.com/downloads/sc-4.6.2-linux.tar.gz -o saucelabs.tar.gz
          ls -al
          tar -xzf saucelabs.tar.gz
          echo "Untar saucelabs.tar.gz"
          ls -al
          ./sc-4.6.2-linux/bin/sc -u $SAUCE_USERNAME -k $SAUCE_PASSWORD -i $SAUCE_TUNNEL_ID --no-remove-colliding-tunnels -v --se-port 4445 &
      - name: Test Execution
        run: |
          export SAUCE_USERNAME="${{ secrets.SAUCE_USERNAME }}"
          export SAUCE_PASSWORD="${{ secrets.SAUCE_PASSWORD }}"
          export SAUCE_TUNNEL_ID="smartx:${{ matrix.browser }}:$(date +%s)"
          export SAUCE_IDENTIFIER=$SAUCE_TUNNEL_ID
          export SAUCE_TUNNEL_PARENT="ta-automation"
          export JOB_NAME="GithubActions::${GITHUB_REPOSITORY#splunk/}[${GITHUB_REF#refs/heads/}][${{ matrix.browser }}] #$(date +%s)"
          echo "*************************************"
          echo $SAUCE_IDENTIFIER
          sudo apt-get update;
          sudo apt-get install -y --no-install-recommends apt-utils;
          sudo apt-get install -y build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git python-is-python3 python3-distutils python3-pip;
          mkdir -p /work/tests
          mkdir -p /work/test-results
          cp dist /work/dist

          mv tests/pytest-ci.ini work/pytest.ini
          cat work/pytest.ini

          pip install /work/dist/*
          pip install pytest-splunk-addon==1.3.11a1
          pip install pytest-expect
          pip install pytest-rerunfailures

          cp tests/deps/splunk-add-on-for-ucc-example/tests /work/tests
          cp tests/deps/splunk-add-on-for-ucc-example/.pytest.expect /work/.pytest.expect
          cp tests/deps/splunk-add-on-for-ucc-example/package /work/package
          cd work
          ls -al
          ls -al tests/
          pytest -vv --splunk-host=splunk-standalone.test --browser=${{ matrix.browser }} -k ${{ matrix.test_suit }} tests/ui
          pgrep -f "./sc -u $SAUCE_USERNAME -k $SAUCE_PASSWORD -i $SAUCE_TUNNEL_ID --no-remove-colliding-tunnels -v --se-port 4445" | xargs kill -2
          ls -al
          ls -al test-results
      - uses: actions/upload-artifact@v2 
        if: always()
        with:
          name: test-results-${{ matrix.splunk }}_${{ matrix.python-version }}_${{ matrix.browser }}_${{ matrix.test_suit }}
          path: test-results/*
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: test-report-${{ matrix.splunk }}_${{ matrix.python-version }}_${{ matrix.browser }}_${{ matrix.test_suit }}
          path: "test-results/*.xml"
          reporter: java-junit

  publish:
    if: always()
    needs:
      - pre-commit
      - build
      - review_secrets
      - run-ui-tests
      - run-unit-tests
    runs-on: ubuntu-latest
    env:
      NEEDS: ${{ toJson(needs) }}
    steps:
      - name: check if tests have passed or skipped
        if: github.event_name != 'pull_request'
        id: check
        shell: bash
        run: |
          RUN_PUBLISH=$(echo "$NEEDS" | jq ".[] |  select(  ( .result != \"skipped\" ) and .result != \"success\" ) | length == 0")
          if [[ $RUN_PUBLISH != *'false'* ]]
          then
              echo "::set-output name=run-publish::true"
          else
              echo "::set-output name=run-publish::false"
          fi
      - name: exit without publish
        if: ${{ steps.check.outputs.run-publish == 'false' || github.event_name == 'pull_request'}}
        run: |
          echo " some test job failed. "
          exit 1
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: false
          persist-credentials: false
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Install Poetry
        run: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 -
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2.5.4
        with:
          semantic_version: 17
          extra_plugins: |
            @semantic-release/exec
            @semantic-release/git
            @google/semantic-release-replace-plugin
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_ADMIN }}
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
